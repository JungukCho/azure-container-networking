name: IPV6 Conformance Test

on:
  workflow_dispatch:
  push:
    branches:
      - npm-support-ipv6-on-linux
  schedule:
    # run once a day at midnight
    - cron: '0 0 * * *'

jobs:
  npm-ipv6-conformance-test:
    #runs-on: ubuntu-latest
    runs-on: ubuntu-18.04
    env:
      NPM_IMAGE_NAME: npm-ipv6-test
      KIND_CLUSTER_NAME: npm-kind 

    steps:
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.16
      
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Kind
        env:
          KIND_VERSION: v0.11.1
          KIND_CONFIG: ./test/kind/kind-ipv6-cluster.yaml
        run: |
          sudo sysctl net.ipv6.conf.all.disable_ipv6
          set -x
          curl -Lo ./kind https://github.com/kubernetes-sigs/kind/releases/download/${KIND_VERSION}/kind-$(uname)-amd64
          chmod +x ./kind
          sudo mv kind /usr/local/bin
          kind create cluster --config ${KIND_CONFIG} --name ${KIND_CLUSTER_NAME}

      - name: Install kubectl
        run: |
          export GOBIN=$(go env GOPATH)/bin
          export PATH=$PATH:$GOBIN
          mkdir -p $GOBIN
          curl -LO https://dl.k8s.io/release/v1.20.0/bin/linux/amd64/kubectl
          chmod +x kubectl && mv kubectl $GOBIN
          kubectl cluster-info
          echo "current-context:" $(kubectl config current-context)
          time kubectl wait --for=condition=Ready --timeout=3m pods --all --namespace kube-system
          kubectl get pods --all-namespaces
          kubectl get nodes
          kubectl get nodes --show-labels
          
      - name: Make NPM image
        run: |
          VERSION=${NPM_IMAGE_NAME} make azure-npm-image
          docker inspect acnpublic.azurecr.io/azure-npm:${NPM_IMAGE_NAME}

      - name: Install Azure NPM
        run: |
          sed -i "s/mcr.microsoft.com\/containernetworking\/azure-npm:v1.4.1/acnpublic.azurecr.io\/azure-npm:${NPM_IMAGE_NAME}/" ./npm/azure-npm.yaml 
          sed -i "s/imagePullPolicy: IfNotPresent/imagePullPolicy: Never/" ./npm/azure-npm.yaml
          kind load docker-image acnpublic.azurecr.io/azure-npm:${NPM_IMAGE_NAME} --name ${KIND_CLUSTER_NAME}
          kubectl apply -f ./npm/azure-npm.yaml
          # time kubectl wait --for=condition=ready pod -n kube-system -l k8s-app=azure-npm
          # time kubectl wait --for=condition=ready --timeout=3m pod -n kube-system -l k8s-app=azure-npm
          kubectl get pods -n kube-system
          cat ./npm/azure-npm.yaml
          
      - name: Build e2e.test
        run: |
          git clone  https://github.com/kubernetes/kubernetes.git 
          pwd
          cd kubernetes
          make WHAT=test/e2e/e2e.test
          ls ./_output/bin/
          kubectl get pods -n kube-system
          cat /etc/issue
          name=$(kubectl get pods -l k8s-app=azure-npm -n kube-system -o jsonpath='{.items[*].metadata.name}')
          pod=$(echo $name | awk '{print $1}')
          echo ${pod}
          kubectl exec ${pod} -n kube-system -- /usr/sbin/ip6tables -nvL

      - name: Run network policy conformance test
        env:
          FQDN: "https://[::1]"
          AGNHOST: "k8s.gcr.io/e2e-test-images/agnhost:2.32"
        run: |
          # sudo iptables -nvL
          # sudo ip6tables -nvL
          docker pull ${AGNHOST}
          kind load docker-image ${AGNHOST}
          CLUSTER_INFO=$(kubectl  cluster-info  | grep "control plane")
          PORT=${CLUSTER_INFO##*:}
          echo "current cluster info:" ${CLUSTER_INFO}
          echo "current fqdn:" ${FQDN} 
          echo "current port:" ${PORT}
          kubectl logs -n kube-system -l k8s-app=azure-npm --tail -1 --prefix
          export KUBECONFIG="${HOME}/.kube/config"
          KUBERNETES_SERVICE_HOST=${FQDN} KUBERNETES_SERVICE_PORT=${PORT} ./kubernetes/_output/bin/e2e.test -ginkgo.focus="NetworkPolicy" --provider=local --ginkgo.skip="SCTP" --kubeconfig=${HOME}/.kube/config

      - name: Fetch logs
        if: always()
        run: |
          kubectl logs -n kube-system -l k8s-app=azure-npm --tail -1 --prefix > npm-logs.txt

      - name: 'Upload Logs'
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: logs
          path: |
            ./npm-logs.txt
